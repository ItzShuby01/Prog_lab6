package org.example.client.util;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import org.example.common.data.Coordinates;
import org.example.common.data.Country;
import org.example.common.data.EyeColor;
import org.example.common.data.HairColor;
import org.example.common.data.Location;
import org.example.common.data.Person;

public class PersonIOService {
    private final IOService ioService;

    public PersonIOService(IOService ioService) {
        this.ioService = ioService;

    }

    public Person readPerson() {
        // ID will be generated by the server, so no ID generation on the client

        String name = readName();
        Coordinates coordinates = readCoordinates();
        LocalDateTime creationDate = LocalDateTime.now(); // Creation date is client-side for consistency, server might override
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("E, dd.MM.yyyy HH:mm:ss");
        ioService.print("Creation date was automatically generated: " + creationDate.format(formatter));
        double height = readHeight();
        EyeColor eyeColor = readEyeColor();
        HairColor hairColor = readHairColor();
        Country nationality = readCountry();
        Location location = readLocation();

        // Pass null for ID; server will generate it.
        return new Person(
                null,
                name,
                coordinates,
                creationDate,
                height,
                eyeColor,
                hairColor,
                nationality,
                location);
    }

    private String readName() {
        while (true) {
            String name = ioService.readLine("Enter person name: ");
            if (name == null || name.isBlank()) {
                ioService.print("Name cannot be empty. Please try again.");
            } else {
                return name;
            }
        }
    }

    private Coordinates readCoordinates() {
        Coordinates coordinates = new Coordinates();
        while (true) {
            try {
                ioService.print("Enter person coordinates:");
                int x = ioService.readInt("x (int, max 629): "); // Corrected text for x limit
                if (x > 629) {
                    throw new IllegalArgumentException("x must be less than 630 (max 629).");
                }
                double y = ioService.readDouble("y (double, finite): ");
                if (Double.isNaN(y) || Double.isInfinite(y)) {
                    throw new IllegalArgumentException("Y coordinate cannot be NaN or Infinity.");
                }
                coordinates.setX(x);
                coordinates.setY(y);
                return coordinates;
            } catch (NumberFormatException e) {
                ioService.print("Invalid number format. Please enter a valid integer for x and a valid double for y.");
            } catch (IllegalArgumentException e) {
                ioService.print("Validation error: " + e.getMessage());
            }
        }
    }

    private double readHeight() {
        while (true) {
            try {
                double height = ioService.readDouble("Enter person height (double, positive): ");
                if (Double.isNaN(height) || Double.isInfinite(height) || height <= 0) {
                    throw new IllegalArgumentException("Height must be positive and finite (no NaN/Infinity).");
                }
                return height;
            } catch (NumberFormatException e) {
                ioService.print("Invalid number format. Please enter a valid double.");
            } catch (IllegalArgumentException e) {
                ioService.print("Validation error: " + e.getMessage());
            }
        }
    }

    private EyeColor readEyeColor() {
        while (true) {
            try {
                String input = ioService.readLine("Enter person eye color (RED, BLACK, ORANGE): ").toUpperCase();
                return EyeColor.valueOf(input);
            } catch (IllegalArgumentException e) {
                ioService.print("Invalid input. Valid eye colors are " + Arrays.toString(EyeColor.values()) + ".");
            }
        }
    }

    private HairColor readHairColor() {
        while (true) {
            try {
                String input = ioService.readLine("Enter person hair color (GREEN, BLUE, YELLOW, BROWN): ").toUpperCase();
                return HairColor.valueOf(input);
            } catch (IllegalArgumentException e) {
                ioService.print("Invalid input. Valid hair colors are " + Arrays.toString(HairColor.values()) + ".");
            }
        }
    }

    private Country readCountry() {
        while (true) {
            try {
                String input = ioService.readLine("Enter nationality (RUSSIA, GERMANY, ITALY, THAILAND, JAPAN) (press Enter to skip): ").trim();
                if (input.isBlank()) {
                    return null; // Allow null for nationality
                }
                return Country.valueOf(input.toUpperCase());
            } catch (IllegalArgumentException e) {
                ioService.print("Invalid input. Valid options are " + Arrays.toString(Country.values()) + ".");
            }
        }
    }

    private Location readLocation() {
        while (true) {
            String input = ioService.readLine("Do you want to enter a location? (y/n): ").trim();
            if (input.equalsIgnoreCase("n") || input.equalsIgnoreCase("no")) {
                return null; // Allow null for location
            } else if (input.equalsIgnoreCase("y") || input.equalsIgnoreCase("yes")) {
                Location location = new Location();
                while (true) {
                    try {
                        ioService.print("Enter person location:");
                        float parsedLocationX = (float) ioService.readDouble("x (float, finite): ");
                        if (Float.isNaN(parsedLocationX) || Float.isInfinite(parsedLocationX)) {
                            throw new IllegalArgumentException("Location X cannot be NaN or Infinity.");
                        }

                        float parsedLocationY = (float) ioService.readDouble("y (float, finite): ");
                        if (Float.isNaN(parsedLocationY) || Float.isInfinite(parsedLocationY)) {
                            throw new IllegalArgumentException("Location Y cannot be NaN or Infinity.");
                        }
                        String name = ioService.readLine("name (string, max 530 chars): ");
                        if (name == null || name.isBlank()) {
                            throw new IllegalArgumentException("Location name cannot be empty.");
                        }
                        if (name.length() > 530) {
                            throw new IllegalArgumentException("Location name cannot exceed 530 characters.");
                        }

                        location.setX(parsedLocationX);
                        location.setY(parsedLocationY);
                        location.setName(name);
                        return location; // Return valid location and exit loop
                    } catch (NumberFormatException e) {
                        ioService.print("Invalid number format. Please enter valid numbers.");
                    } catch (IllegalArgumentException e) {
                        ioService.print("Validation error: " + e.getMessage());
                    }
                }
            } else {
                ioService.print("Please answer with 'y', 'yes', 'n', or 'no'.");
            }
        }
    }
}